// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Room model (كما عندك)
model Room {
  id            String     @id @default(cuid())
  roomNumber    String     @unique
  roomType      String
  status        RoomStatus @default(AVAILABLE)
  pricePerNight Float
  description   String?
  needsCleaning Boolean  @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  bookings      Booking[]   // <-- هذا الحقل يربط الغرفة بالحجوزات
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

// User model compatible with NextAuth - يحتوي حقل password لا يتعامل معه الـAdapter مباشرة
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          String    @default("ADMIN")
  createdAt     DateTime  @default(now())

  // relations for NextAuth adapter
  accounts Account[]
  sessions Session[]
}

// NextAuth required models (from Prisma adapter template)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String  @id @default(cuid())
  identifier String
  token      String  @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Guest {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  gender         String
  dateOfBirth    DateTime
  nationality    String
  maritalStatus  String?
  phone          String
  email          String?
  address        String?
  passportNumber String
  passportIssue  DateTime
  passportExpiry DateTime
  passportPlace  String
  nationalId     String?
  notes          String?
  preferences    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // إذا أردت استخدام checkIn و checkOut، أضفهم هنا:
  checkIn        DateTime?
  checkOut       DateTime?

  bookings       Booking[]  // <-- هذا الحقل يربط النزيل بالحجوزات
}


// Booking model لإدارة الحجوزات
model Booking {
  id          String    @id @default(cuid())
  guestId     String
  guest       Guest     @relation(fields: [guestId], references: [id])
  roomId      String
  room        Room      @relation(fields: [roomId], references: [id])
  
  checkIn     DateTime
  checkOut    DateTime
  adults      Int       @default(1)
  children    Int       @default(0)
  status      BookingStatus @default(PENDING)
  source      String?        // Walk-in / Online / OTA / Agent
  totalPrice  Float?         
  notes       String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
}

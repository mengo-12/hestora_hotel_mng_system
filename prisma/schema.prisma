// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////////////
// Hotel Groups (ملاك/مجموعة فنادق)
//////////////////////////////////
model HotelGroup {
  id         String     @id @default(cuid())
  name       String
  owner      User       @relation("OwnerHotelGroups", fields: [ownerId], references: [id])
  ownerId    String
  properties Property[]
  guests     Guest[]    @relation("HotelGroupGuests")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

//////////////////////////////////
// Properties (Hotels)
//////////////////////////////////
model Property {
  id           String      @id @default(cuid())
  code         String      @unique
  name         String
  timezone     String
  currency     String
  hotelGroup   HotelGroup? @relation(fields: [hotelGroupId], references: [id])
  hotelGroupId String? // مؤقتًا nullable لتجنب مشاكل الترحيل
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  rooms        Room[]
  roomTypes    RoomType[]
  bookings     Booking[]
  users        User[]
  ratePlans    RatePlan[]
  housekeeping HousekeepingTask[]
  companies    Company[]
  inventory    Inventory[]
  guests       Guest[]
  auditLogs    AuditLog[]
}

//////////////////////////////////
// Room Types & Rooms
//////////////////////////////////
model RoomType {
  id         String      @id @default(cuid())
  property   Property    @relation(fields: [propertyId], references: [id])
  propertyId String
  code       String
  name       String
  capacity   Int
  basePrice  Decimal
  amenities  String?
  rooms      Room[]
  ratePlans  RatePlan[]
  inventory  Inventory[]

  @@unique([propertyId, code])
}

model Room {
  id                String             @id @default(cuid())
  property          Property           @relation(fields: [propertyId], references: [id])
  propertyId        String
  number            String
  roomType          RoomType           @relation(fields: [roomTypeId], references: [id])
  roomTypeId        String
  status            String             @default("VACANT") // VACANT, OCCUPIED, CLEANING, MAINTENANCE
  floor             Int?
  notes             String?
  logs              RoomStatusLog[]
  bookings          Booking[]
  housekeepingTasks HousekeepingTask[]

  @@unique([propertyId, number])
}

model RoomStatusLog {
  id          String   @id @default(cuid())
  room        Room     @relation(fields: [roomId], references: [id])
  roomId      String
  oldStatus   String
  newStatus   String
  changedBy   User     @relation(fields: [changedById], references: [id])
  changedById String
  changedAt   DateTime @default(now())
}

//////////////////////////////////
// Guests
//////////////////////////////////
model Guest {
  id             String      @id @default(cuid())
  property       Property?   @relation(fields: [propertyId], references: [id])
  propertyId     String? // مؤقتًا nullable لتجنب مشاكل الترحيل
  hotelGroup     HotelGroup? @relation("HotelGroupGuests", fields: [hotelGroupId], references: [id])
  hotelGroupId   String?
  firstName      String
  lastName       String
  phone          String?
  nationality    String?
  passportNumber String?
  dateOfBirth    DateTime?
  email          String?
  bookings       Booking[]
  folios         Folio[]
  extras         Extra[] // الحقل العكسي
}

//////////////////////////////////
// Bookings / Reservations
//////////////////////////////////
model Booking {
  id              String    @id @default(cuid())
  property        Property  @relation(fields: [propertyId], references: [id])
  propertyId      String
  guest           Guest     @relation(fields: [guestId], references: [id])
  guestId         String
  room            Room?     @relation(fields: [roomId], references: [id])
  roomId          String?
  checkIn         DateTime
  checkOut        DateTime
  status          String    @default("Booked") // Booked, InHouse, CheckedOut, NoShow
  ratePlan        RatePlan? @relation(fields: [ratePlanId], references: [id])
  ratePlanId      String?
  adults          Int
  children        Int
  specialRequests String?
  folio           Folio?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  extras    Extra[] // هذا هو الحقل العكسي
}

//////////////////////////////////
// Rate Plans & Rules
//////////////////////////////////
model RatePlan {
  id         String     @id @default(cuid())
  property   Property   @relation(fields: [propertyId], references: [id])
  propertyId String
  roomType   RoomType   @relation(fields: [roomTypeId], references: [id])
  roomTypeId String
  code       String
  name       String
  basePrice  Decimal
  currency   String
  isPublic   Boolean    @default(true)
  rateRules  RateRule[]
  bookings   Booking[]

  @@unique([propertyId, code])
}

model RateRule {
  id                String   @id @default(cuid())
  ratePlan          RatePlan @relation(fields: [ratePlanId], references: [id])
  ratePlanId        String
  date              DateTime
  priceOverride     Decimal?
  minLOS            Int?
  maxLOS            Int?
  closedToArrival   Boolean  @default(false)
  closedToDeparture Boolean  @default(false)
}

//////////////////////////////////
// Inventory (عدد الغرف المتاحة يومياً لكل RoomType)
//////////////////////////////////
model Inventory {
  id         String   @id @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
  roomTypeId String
  date       DateTime
  allotment  Int
  sold       Int      @default(0)
  stopSell   Boolean  @default(false)

  @@unique([propertyId, roomTypeId, date])
}

//////////////////////////////////
// Housekeeping
//////////////////////////////////
model HousekeepingTask {
  id           String    @id @default(cuid())
  room         Room      @relation(fields: [roomId], references: [id])
  roomId       String
  type         String
  status       String    @default("Open")
  assignedTo   User?     @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  priority     String?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  property     Property? @relation(fields: [propertyId], references: [id])
  propertyId   String? // مؤقتًا nullable لتجنب مشاكل الترحيل
}

//////////////////////////////////
// Folio / Billing
//////////////////////////////////
model Folio {
  id        String    @id @default(cuid())
  booking   Booking   @relation(fields: [bookingId], references: [id])
  bookingId String    @unique
  guest     Guest     @relation(fields: [guestId], references: [id])
  guestId   String
  status    String    @default("Open") // Open, Closed
  charges   Charge[]
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  extras    Extra[] // الحقل العكسي
}

model Charge {
  id          String   @id @default(cuid())
  folio       Folio    @relation(fields: [folioId], references: [id])
  folioId     String
  code        String
  description String
  amount      Decimal
  tax         Decimal?
  postedAt    DateTime @default(now())
  postedBy    User     @relation(fields: [postedById], references: [id])
  postedById  String
}

model Payment {
  id         String   @id @default(cuid())
  folio      Folio    @relation(fields: [folioId], references: [id])
  folioId    String
  method     String
  amount     Decimal
  ref        String?
  postedAt   DateTime @default(now())
  postedBy   User     @relation(fields: [postedById], references: [id])
  postedById String
}

//////////////////////////////////
// Companies / Contracts
//////////////////////////////////
model Company {
  id            String    @id @default(cuid())
  property      Property  @relation(fields: [propertyId], references: [id])
  propertyId    String
  code          String
  name          String
  creditLimit   Decimal?
  rateAgreement String?
  bookings      Booking[]

  @@unique([propertyId, code])
}

//////////////////////////////////
// Users / Roles
//////////////////////////////////
model User {
  id               String             @id @default(cuid())
  property         Property           @relation(fields: [propertyId], references: [id])
  propertyId       String
  email            String             @unique
  password         String
  name             String
  role             String             @default("FrontDesk") // Admin, FrontDesk, HK, Manager, Owner
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  RoomStatusLog    RoomStatusLog[]
  HousekeepingTask HousekeepingTask[]
  Charge           Charge[]
  Payment          Payment[]
  AuditLog         AuditLog[]

  hotelGroupsOwned HotelGroup[] @relation("OwnerHotelGroups")
}

//////////////////////////////////
// Extras / Add-ons
//////////////////////////////////
model Extra {
  id String @id @default(cuid())

  // علاقة مع Booking
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String

  // علاقة مع Guest (اختياري)
  guest   Guest?  @relation(fields: [guestId], references: [id])
  guestId String?

  // بيانات الخدمة
  name        String
  description String?
  unitPrice   Decimal
  quantity    Int      @default(1)
  tax         Decimal?
  status      String   @default("Unpaid")

  // ربط Folio (اختياري)
  folio   Folio?  @relation(fields: [folioId], references: [id])
  folioId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//////////////////////////////////
// Audit Logs
//////////////////////////////////
model AuditLog {
  id         String   @id @default(cuid())
  actor      User     @relation(fields: [actorId], references: [id])
  actorId    String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  action     String
  metadata   Json?
  createdAt  DateTime @default(now())
}
